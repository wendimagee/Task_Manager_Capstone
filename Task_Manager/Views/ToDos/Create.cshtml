@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model Task_Manager.Models.ToDos

@{
    ViewData["Title"] = "Create";
}
@if (SignInManager.IsSignedIn(User))
{

    <h1>Create</h1>

    <h4>ToDo</h4>
    <hr />
    <div class="row">
        <div class="col-md-4">
            <form asp-action="Create">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input label="Assigned User: "name="TaskUser" value="@User.Identity.Name"></input>
                <div class="form-group">
                    <label asp-for="TaskDescription" class="control-label"></label>
                    <input asp-for="TaskDescription" class="form-control" />
                    <span asp-validation-for="TaskDescription" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="CompletionStatus" class="control-label"></label>
                    <input asp-for="CompletionStatus" class="form-control" />
                    <span asp-validation-for="CompletionStatus" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="DueDate" class="control-label"></label>
                    <input asp-for="DueDate" class="form-control" />
                    <span asp-validation-for="DueDate" class="text-danger"></span>
                </div>
                <div class="form-group">

                    @*<span asp-validation-for="TaskUser" value=@User.Identity></span>*@
                    <input type="submit" value="Create" class="btn btn-primary" />
                </div>
            </form>
        </div>
    </div>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>
}
else
{
    <h2>Please Log in or Create an Account to continue</h2>
}
    @section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
